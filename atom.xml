<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Aspiring Entrepreneur]]></title>
  <link href="http://yangsu.github.com/atom.xml" rel="self"/>
  <link href="http://yangsu.github.com/"/>
  <updated>2013-01-18T15:26:30-05:00</updated>
  <id>http://yangsu.github.com/</id>
  <author>
    <name><![CDATA[Yang Su]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chapter 2: The Psychology of Everyday Actions]]></title>
    <link href="http://yangsu.github.com/blog/2012/10/17/chapter-2-the-psychology-of-everyday-actions/"/>
    <updated>2012-10-17T17:20:00-04:00</updated>
    <id>http://yangsu.github.com/blog/2012/10/17/chapter-2-the-psychology-of-everyday-actions</id>
    <content type="html"><![CDATA[<blockquote>
<p>If an error is possible, someone will make it. The designer must assume that all possible errors will occur and design so as to minimize the chance of error in the first place, or its effects once it gets made. Errors should be easy to detect, they should have minimal consequences, and, if possible, their effects should be reversible.</p>
</blockquote>

<h2 id="introduction">Introduction</h2>

<p>This chapter of <a href="http://www.amazon.com/Design-Everyday-Things-Donald-Norman/dp/0465067107" title="The Design of Everyday Things">The Design of Everyday Things</a> introduces and formalizes basic concepts and principles of design from observations of everyday objects. Why some objects, as simple as doors, please their users while others frustrate them.</p>

<!-- more -->

<p>If a task appears simple or trivial, people blame themselves rather than faulty design.</p>

<p>People tend to find causes for events<br>
- casual relationship between 2 things occurred in succession<br>
- perceived relationship between the result and the thing being blamed</p>

<p>blame based on little or erroneous information ⇒ blame/credit can be asserted independent of reality</p>

<p>if everyone perceives the fault to be their own, noby wants to admit to having trouble<br>
This creates a conspiracy of silence, maintaining the felling of guilt and helplessness among users</p>

<p>In general, people attribute</p>

<ul>
<li>their problems ⇒ the environment</li>
<li>problems of others ⇒ others&#39; personalities</li>
<li>their successes ⇒ their personalities</li>
<li>successes of others ⇒ the environment</li>
</ul>

<h2 id="definitions">Definitions</h2>

<ul>
<li><p><strong><span id="learned-helplessness">Learned Helplessness</span></strong>: people experience failure at a task, often numerous times ⇒ conclude that they simply cannot do the task; they are helpless</p></li>
<li><p><strong><span id="taught-helplessness">Taught Helplessness</span></strong>:<br>
failure at a task ⇒<br>
generalization of failure at all tasks ⇒<br>
not even trying at a task ⇒<br>
failure at a task</p></li>
</ul>

<h2 id="how-people-explain-things">How People Explain Things</h2>

<ul>
<li>with hindsight, it&#39;s almost impossible to assess how the people could have made the mistake when the course of action is rather logical in that particular situation</li>
<li>explanations tend to be based on past experiences, which may not apply to the present</li>
</ul>

<p><h2 id="seven-stages-of-action">Seven Stages of Action</h2><br>
1. Forming the goal</p>

<h3 id="toc_10">Execution</h3>

<ol>
<li>Forming the intention</li>
<li>Specifying an action</li>
<li>Executing the action or action sequence</li>
</ol>

<h3 id="toc_11">Evaluation</h3>

<ol>
<li>Perceiving the state of he world</li>
<li>Interpreting the state of the world</li>
<li>Evaluating the outcome</li>
</ol>

<p>The Gulf of Execution - how well does the system provide actions that correspond to the intentions of the person?<br>
- measure of how well the system allows a user to perform the intended action</p>

<p>The Gulf of Evaluation - dose the system provide a physical representation that can be directly perceived and that is directly interpretable in terms of the intentions and expectations of the person<br>
- measure of how much effor a user must exert to interpte the physical state of the system and how well the expectiations are met</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chapter 1: The Psychopathology of Everyday Things]]></title>
    <link href="http://yangsu.github.com/blog/2012/10/14/chapter-1-the-psychopathology-of-everyday-things/"/>
    <updated>2012-10-14T17:52:00-04:00</updated>
    <id>http://yangsu.github.com/blog/2012/10/14/chapter-1-the-psychopathology-of-everyday-things</id>
    <content type="html"><![CDATA[<blockquote>
<p>The human mind is exquisitely tailored to make sense of the world. Give it the slightest clue and off it goes, providing explanation, rationalization, and understanding.</p>
</blockquote>

<h2 id="introduction">Introduction</h2>

<p>This chapter of <a href="http://www.amazon.com/Design-Everyday-Things-Donald-Norman/dp/0465067107" title="The Design of Everyday Things">The Design of Everyday Things</a> introduces and formalizes basic concepts and principles of design from observations of everyday objects. Why some objects, as simple as doors, please their users while others frustrate them.</p>

<!-- more -->

<h2 id="definitions">Definitions</h2>

<ul>
<li><p><strong><span id="visibility">Visibility</span></strong>: correct parts must be visible, they must convey the correct messages; indicates the mapping between <em>intended actions</em> and <em>actual operations</em></p></li>
<li><p><strong><span id="affordance">Affordance</span></strong>: the perceived and actual properties of the thing, primarily the fundamental properties that determine how it can be used. <em>Affords</em> = <em>&quot;is for&quot;</em></p>

<p><em>Examples</em>:</p>

<p><img src="http://yangsu.github.com/images/2012-10-14-chapter-1/door-push-bar.jpeg" alt="horizontal bar &lt;em&gt;affords&lt;/em&gt; pushing (www.vanseodesign.com/web-design/minimize-errors-part-i)" title="horizontal bar"></p>

<p><img src="http://yangsu.github.com/images/2012-10-14-chapter-1/door-pull-handle.jpeg" alt="vertical bar &lt;em&gt;affords&lt;/em&gt; pulling (www.flickr.com/photos/redsquirrel/4870919966/sizes/m/in/photostream)" title="vertical bar"></p></li>
<li><p><strong><span id="system-image">System Image</span></strong>: the visible part of a device or system</p></li>
<li><p><strong><span id="mental-model">Mental Models</span></strong>: the models people have for themselves, others, the environment, and things with which they interact. Formed through experience, training, instructions, or by interpreting perceived actions and the <a href="#system-image">System Image</a></p></li>
<li><p><strong><span id="mapping">Mapping</span></strong> : the relationship between two things<br>
<em>Example</em>: controls ⇒ their resulting movements and the effects in the physical world</p></li>
<li><p><strong><span id="natural-mapping">Natural Mapping</span></strong>: <a href="#mapping">mapping</a> that takes advantage of physical/spatial analogies and cultural standards<br>
<em>Examples</em>:</p>

<p><img src="http://yangsu.github.com/images/2012-10-14-chapter-1/rising-level.png" alt="Rising Level ⇒ More" title="rising level"><br>
<img src="http://yangsu.github.com/images/2012-10-14-chapter-1/diminishing-level.png" alt="Diminishing Level ⇒ Less" title="diminishing level"></p>

<ul>
<li><p><strong>Additive Dimensions</strong>: add more to show incremental increases</p>

<p><em>Examples</em>: amount, loudness, weight, length, brightness, etc.</p></li>
<li><p><strong>Substitutive Dimensions</strong>: substitute one value for another to make a change</p>

<p><em>Examples</em>: pitch, taste, color, location</p></li>
</ul></li>
<li><p><strong><span id="feedback">Feedback</span></strong>: sending back information to users about what actions have been performed<br>
<em>Example</em>:<br>
<img src="http://yangsu.github.com/images/2012-10-14-chapter-1/phone.png" alt="Phones provide lots of feedback" title="phone"></p>

<ul>
<li>Tactile feedback of buttons</li>
<li>Tones mapped for each button</li>
<li>Clicks, tones, to inform state and progress of a call or operation</li>
<li><em>Sidetones</em>, the voice signal feedback into the ear to help regulate loudness</li>
</ul></li>
</ul>

<h2 id="principles-of-design">Principles of Design</h2>

<ol>
<li>Provide a good conceptual model

<ul>
<li>The proper <a href="#system-image">System Image</a> and immediate <a href="#feedback">feedback</a> for each operation can help users form a clear, concise, and correct <a href="#mental-model">mental model</a></li>
</ul></li>
<li>Make Things Visible

<ul>
<li>Use good <a href="#natural-mapping">natural mappings</a> and proper <a href="#visibility">visibility</a> to help the user understand of possible operations, their effects, and the system state</li>
<li>The number of controls should be ≧ the number of functions a device performs, so each can be specifically mapped to a particular function</li>
</ul></li>
</ol>

<h2 id="designers-responsibility">Designer&#8217;s Responsibility</h2>

<p>The Designer must balance the conflicting needs of others that help realize a product design:</p>

<ul>
<li><em>Manufacturer</em>: the product can be produced economically and efficiently</li>
<li><em>Store</em>: the product should be attractive to customers</li>
<li><em>Purchaser</em>: the price, appearance, prestige value of a product at the Store</li>
<li><em>User</em>: the functionality and usability of a product at home</li>
<li><em>Repairer</em>: the product&#39;s maintainability; how easy it is to take apart, diagnose, and service</li>
</ul>

<h2 id="development-of-a-technology">Development of a Technology</h2>

<p><img src="http://yangsu.github.com/images/2012-10-14-chapter-1/development-of-a-technology.png" alt="Development of a Technology" title="development of a technology"></p>

<h2 id="the-paradox-of-technology">The Paradox of Technology</h2>

<p>The same technology that simplifies life by providing more functions in each device also complicates life by making the device harder to learn and use</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Octopress with Github Flavored Markdown (RedCarpet)]]></title>
    <link href="http://yangsu.github.com/blog/2012/10/11/using-octopress-with-github-flavored-markdown-redcarpet/"/>
    <updated>2012-10-11T11:38:00-04:00</updated>
    <id>http://yangsu.github.com/blog/2012/10/11/using-octopress-with-github-flavored-markdown-redcarpet</id>
    <content type="html"><![CDATA[<p>One of the most annoying features of Markdown for me is the fact that newlines within a paragraph are automatically joined, which is one of the reasons why I like <a href="http://github.github.com/github-flavored-markdown/">Github Flavored Markdown</a> so much.</p>

<p>Ever since I setup my Octopress blog, I&#39;ve wanted to use it with GFM. I searched around the web and found how to switch the markdown processor for <a href="http://jekyllrb.com/">Jekyll</a>. I came across <a href="http://www.whatwherewhy.me/blog/2012/01/15/changing-the-markdown-processor-in-octopress/">this post</a> with instructions on switching to <a href="http://maruku.rubyforge.org/">Maruku</a>, which extends Markdown with the ability to create tables, footnotes, custom header ids, etc. I gave it a shot, but quickly realized that there&#39;s no option to enable hard warp linebreaks. Back to searching.</p>

<!-- more -->

<p>I then came across <a href="http://stackoverflow.com/questions/373002/better-ruby-markdown-interpreter">this post</a> on Stackoverflow that compared <a href="http://maruku.rubyforge.org/">Maruku</a>, <a href="http://www.deveiate.org/projects/BlueCloth">BlueCloth</a>, and <a href="https://github.com/rtomayko/rdiscount">RDiscount</a>, none of which offered what I wanted. However, I discovered <a href="https://github.com/blog/832-rolling-out-the-redcarpet">RedCarpet</a>, the open source Markdown processor tha Github uses to render Markdown and GFM pages. Seems like exactly what I was looking for.</p>

<p>Maybe it&#39;s because my Google-Fu is not up to par, but I could not find any instructions on using RedCarpet with Octopress. It turned out that I was just not looking for the correct terms. I found <a href="http://stackoverflow.com/questions/10759577/underscore-issues-jekyll-redcarpet-github-flavored-markdown?rq=1">a Stackoverflow answer</a> on how to <a href="https://github.com/mojombo/jekyll/wiki/configuration">configure Jekyll</a> with RedCarpet. Perfect!</p>

<p>Below are the instructions for getting Octopress to render Github Flavored Markdown using RedCarpet.</p>

<hr>

<ol>
<li>add <code>gem &#39;redcarpet&#39;, &#39;~&gt; 2.1.1&#39;</code> to <code>Gemfile</code> in the Octopress directory</li>
<li>run <code>bundle install --no-deployment</code> to install RedCarpet</li>
<li>Install <a href="https://github.com/nono">@nono</a>&#39;s <a href="https://github.com/nono/Jekyll-plugins">RedCarpet Jekyll Plugin</a> by saving it as <code>redcarpet2_markdown.rb</code> in the <code>plugins</code> folder</li>
</ol>

<figure class='code'><figcaption><span>redcarpet2_markdown.rb </span><a href='https://github.com/nono/Jekyll-plugins/blob/master/redcarpet2_markdown.rb'>View on Github</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;digest/md5&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;redcarpet&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;albino&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">PYGMENTS_CACHE_DIR</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../../_cache&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">mkdir_p</span><span class="p">(</span><span class="no">PYGMENTS_CACHE_DIR</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Redcarpet2Markdown</span> <span class="o">&lt;</span> <span class="no">Redcarpet</span><span class="o">::</span><span class="no">Render</span><span class="o">::</span><span class="no">HTML</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">block_code</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">lang</span><span class="p">)</span>
</span><span class='line'>    <span class="n">lang</span> <span class="o">=</span> <span class="n">lang</span> <span class="o">||</span> <span class="s2">&quot;text&quot;</span>
</span><span class='line'>    <span class="n">path</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">PYGMENTS_CACHE_DIR</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">lang</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="no">Digest</span><span class="o">::</span><span class="no">MD5</span><span class="o">.</span><span class="n">hexdigest</span> <span class="n">code</span><span class="si">}</span><span class="s2">.html&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cache</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">colorized</span> <span class="o">=</span> <span class="no">Albino</span><span class="o">.</span><span class="n">colorize</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">lang</span><span class="p">)</span>
</span><span class='line'>      <span class="n">add_code_tags</span><span class="p">(</span><span class="n">colorized</span><span class="p">,</span> <span class="n">lang</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_code_tags</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">lang</span><span class="p">)</span>
</span><span class='line'>    <span class="n">code</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sr">/&lt;pre&gt;/</span><span class="p">,</span> <span class="s2">&quot;&lt;pre&gt;&lt;code class=</span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">lang</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&gt;&quot;</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>         <span class="nb">sub</span><span class="p">(</span><span class="sr">/&lt;\/pre&gt;/</span><span class="p">,</span> <span class="s2">&quot;&lt;/code&gt;&lt;/pre&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cache</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">content</span> <span class="o">=</span> <span class="k">yield</span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">content</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Jekyll</span><span class="o">::</span><span class="no">MarkdownConverter</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">extensions</span>
</span><span class='line'>    <span class="no">Hash</span><span class="o">[</span> <span class="o">*</span><span class="vi">@config</span><span class="o">[</span><span class="s1">&#39;redcarpet&#39;</span><span class="o">][</span><span class="s1">&#39;extensions&#39;</span><span class="o">].</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="o">[</span><span class="n">e</span><span class="o">.</span><span class="n">to_sym</span><span class="p">,</span> <span class="kp">true</span><span class="o">]</span> <span class="p">}</span><span class="o">.</span><span class="n">flatten</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">markdown</span>
</span><span class='line'>    <span class="vi">@markdown</span> <span class="o">||=</span> <span class="no">Redcarpet</span><span class="o">::</span><span class="no">Markdown</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Redcarpet2Markdown</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">extensions</span><span class="p">),</span> <span class="n">extensions</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">convert</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">super</span> <span class="k">unless</span> <span class="vi">@config</span><span class="o">[</span><span class="s1">&#39;markdown&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;redcarpet2&#39;</span>
</span><span class='line'>    <span class="n">markdown</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
4. Replace `markdown: rdiscount` in `_config.yml` with the following
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">markdown</span><span class="p">:</span> <span class="n">redcarpet2</span>
</span><span class='line'><span class="n">redcarpet</span><span class="p">:</span>
</span><span class='line'>  <span class="n">extensions</span><span class="p">:</span> <span class="o">[</span><span class="s2">&quot;hard_wrap&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>That should be it! Now the lines should be hard wrapped. I also have a few other extensions turned on. Below is my extension settings:<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">extensions</span><span class="p">:</span> <span class="o">[</span><span class="s2">&quot;hard_wrap&quot;</span><span class="p">,</span> <span class="s2">&quot;no_intra_emphasis&quot;</span><span class="p">,</span> <span class="s2">&quot;fenced_code_blocks&quot;</span><span class="p">,</span> <span class="s2">&quot;autolink&quot;</span><span class="p">,</span> <span class="s2">&quot;tables&quot;</span><span class="p">,</span> <span class="s2">&quot;with_toc_data&quot;</span><span class="p">,</span> <span class="s2">&quot;strikethrough&quot;</span><span class="p">,</span> <span class="s2">&quot;superscript&quot;</span><span class="o">]</span><br>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li><code>no_intra_emphasis</code>: <code>Multiple_underscores_in_words</code> =&gt; Multiple_underscores_in_words</li>
<li><code>fenced_code_blocks</code>: Don&#39;t need to indent to embed code</li>
<li><code>autolink</code>: URL autolinking =&gt; <a href="http://google.com">http://google.com</a> <a href="mailto:test@email.com">test@email.com</a></li>
<li><code>tables</code>: allow tables</li>
<li><code>with_toc_data</code>: add HTML anchors to each header</li>
<li><code>strikethrough</code>: <code>~~strikethrough text~~</code> =&gt; <del>strikethrough text</del></li>
<li><code>superscript</code>: <code>normaltext ^(superscript)</code> =&gt; normaltext <sup>superscript</sup></li>
</ul>

<p>More options are described in <a href="https://github.com/vmg/redcarpet">RedCarpet&#39;s Documentation</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://yangsu.github.com/blog/2012/10/03/hello-world/"/>
    <updated>2012-10-03T21:07:00-04:00</updated>
    <id>http://yangsu.github.com/blog/2012/10/03/hello-world</id>
    <content type="html"><![CDATA[<p>欢迎！</p>
]]></content>
  </entry>
  
</feed>
